#!/usr/bin/env bash
# set -e

export AWS_PROFILE=gabriel
export AWS_DEFAULT_REGION=eu-west-1

INSTANCE_NAME="on-the-weekend"
IP_NAME="on-the-weekend_ip"
STATIC_IP="34.250.6.15"

STRESS_MAX_CONNS=8000
STRESS_CONNS_PER_INSTANCE=500
STRESS_NUM_INSTANCES=$(expr "$STRESS_MAX_CONNS" / "$STRESS_CONNS_PER_INSTANCE")

function get_status() {
  aws lightsail get-instance-state --instance-name "$INSTANCE_NAME" 2>/dev/null
}

function get_status_code() {
  STATUS=$(get_status)
  if [ -z "$STATUS" ]; then
     echo "-1"
  else
    echo "$STATUS" | jq .state.code 
  fi
}

function is_instance_running() {
  [[ $(get_status_code) = "16" ]]
}

function is_instance_pending() {
  [[ $(get_status_code) = "0" ]]
}

function wait_for_non_pending() {
  while true; do
    if ! is_instance_pending; then
      break
    fi
    echo "waiting for instance to stabilize..."
    sleep 6
  done
}

function create_instance() {
  ./template.sh userdata.template.sh ./userdata.params.sh > ./userdata.txt

  aws lightsail create-instances \
  --instance-names "$INSTANCE_NAME" \
  --availability-zone  "eu-west-1b" \
  --blueprint-id "ubuntu_18_04" \
  --bundle-id "nano_2_0" \
  --tags "key=Project,value=on-the-weekend" \
  --user-data file://./userdata.txt

  rm -f userdata.txt

  wait_for_non_pending
  ensure_static_ip
  open_ports
  send_silence
}

function to_instance() {
  ssh -t "$STATIC_IP" "sudo sh -c 'cat > $1'"
}

function send_silence() {
  cat silence_stereo_192.mp3 | to_instance "/usr/share/icecast2/web/silence_stereo_192.mp3"
}

function update_config() {
  ./template.sh icecast.template.xml icecast.params.sh | ssh -t "$STATIC_IP" 'sudo sh -c "cat > /etc/icecast2/icecast.xml && /etc/init.d/icecast2 reload"'
}

function update_instance() {
  update_config
}

function is_static_ip_attached() {
  [[ $(aws lightsail get-static-ip --static-ip-name "$IP_NAME" | jq .staticIp.isAttached) = "true" ]]
}

function ensure_static_ip() {
  if is_static_ip_attached; then
    return
  fi
  aws lightsail attach-static-ip --static-ip-name "$IP_NAME" --instance-name "$INSTANCE_NAME"
}

function create_or_update_instance() {
  if is_instance_running; then
    echo "Instance already exists, updating"
    update_instance
  else
    echo "Creating instance $INSTANCE_NAME"
    create_instance
  fi
}

function open_ports() {
  aws lightsail open-instance-public-ports \
  --port-info "fromPort=8000,toPort=8001,protocol=TCP" \
  --instance-name "$INSTANCE_NAME" 
}

function get_private_ip() {
  aws lightsail get-instance --instance-name "$INSTANCE_NAME" | jq -r .instance.privateIpAddress
}

function sub_sync() {
  create_or_update_instance
}

function sub_delete() {
  aws lightsail delete-instance --instance-name "$INSTANCE_NAME"
}

function sub_recreate() {
  echo "Running recreate"
  sub_delete
  sub_sync
}

function sub_stresstest() {
  export PRIVATE_IP=$(get_private_ip)
  ./template.sh stress.template.sh > stress.txt

  STRESS_NAMES=$(seq 17 "$STRESS_NUM_INSTANCES" | awk '{print "\"StressTest"$0"\""}' | paste -sd "," -)

  aws lightsail create-instances \
  --instance-names "[$STRESS_NAMES]" \
  --availability-zone  "eu-west-1b" \
  --blueprint-id "ubuntu_18_04" \
  --bundle-id "nano_2_0" \
  --tags "key=Project,value=on-the-weekend" \
  --user-data file://./stress.txt

  # rm -f stress.txt
}

function sub_stopstress() {
  for i in $(seq 1 $STRESS_NUM_INSTANCES)                                                                                      130 â†µ
  do
    aws lightsail delete-instance --instance-name "StressTest$i"
  done
}

subcommand=$1
case $subcommand in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_${subcommand} $@
        if [ $? = 127 ]; then
            echo "Error: '$subcommand' is not a known subcommand." >&2
            echo "       Run '$ProgName --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac